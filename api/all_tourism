// api/all_tourism.js

const AREA_CODES = {
    '서울': 1, '부산': 6, '제주': 39, '강릉': 32,
    '전주': 37, '대구': 4, '광주': 5, '대전': 3,
    '인천': 2, '울산': 7, '경주': 35, '춘천': 32
};

const CONTENT_TYPES = {
    festivals: 15,
    accommodation: 32,
    restaurants: 39,
    culture: 14,
    attractions: 12,
    all: 'all'
};

const API_CONFIG = {
    baseUrl: 'https://apis.data.go.kr/B551011/KorService2/areaBasedList2',
    timeout: 15000,
    maxRetries: 3,
    retryDelay: 1000,
    chunkSize: 20,
    maxItemsPerRequest: 100
};

const isDev = process.env.NODE_ENV === 'development';

export default async function handler(req, res) {
    // CORS 설정
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    const startTime = Date.now();

    try {
        // 입력 파라미터 검증 및 기본값 설정
        const validatedParams = validateAndParseParams(req.query);
        if (validatedParams.error) {
            return res.status(400).json({
                success: false,
                message: validatedParams.error,
                timestamp: new Date().toISOString()
            });
        }

        const { region, type, detail, numOfRows } = validatedParams;

        if (isDev) {
            console.log('🚀 통합 관광 API 시작');
            console.log(`📍 지역: ${region}`);
            console.log(`🏷️ 타입: ${type}`);
            console.log(`📊 요청 개수: ${numOfRows}`);
        }

        // API 키 확인
        const apiKey = getValidApiKey();
        if (!apiKey) {
            return res.status(500).json({
                success: false,
                message: 'API 키가 설정되지 않았습니다',
                timestamp: new Date().toISOString()
            });
        }

        if (isDev) console.log('✅ API 키 확인됨');

        let result = {};

        if (type === 'all') {
            // 전체 타입 병렬 수집
            if (isDev) console.log('🌐 전체 타입 데이터 수집 시작...');
            result = await fetchAllTypesData(apiKey, region, numOfRows);
        } else {
            // 단일 타입 수집
            if (isDev) console.log(`🎯 ${type} 데이터 수집 시작...`);
            result[type] = await fetchTourismDataWithRetry(apiKey, region, type, numOfRows);
        }

        const responseTime = Date.now() - startTime;
        const totalCount = getTotalCount(result);

        return res.status(200).json({
            success: true,
            data: result,
            meta: {
                region: region,
                type: type,
                detailLevel: detail,
                totalCount: totalCount,
                responseTime: `${responseTime}ms`,
                timestamp: new Date().toISOString(),
                apiVersion: 'KorService2'
            },
            message: `✅ ${region} ${type} 통합 관광 정보 ${totalCount}개 수집 완료`
        });

    } catch (error) {
        console.error('❌ 통합 관광 API 오류:', error);
        return res.status(500).json({
            success: false,
            error: error.message,
            message: '통합 관광 정보 수집 중 오류가 발생했습니다',
            timestamp: new Date().toISOString()
        });
    }
}

// 입력 파라미터 검증 및 파싱
function validateAndParseParams(query) {
    const { 
        region = '서울', 
        type = 'festivals', 
        detail = 'basic',
        numOfRows = '50' 
    } = query;

    // 지역 검증
    if (!AREA_CODES[region]) {
        return {
            error: `지원하지 않는 지역입니다: ${region}. 지원 지역: ${Object.keys(AREA_CODES).join(', ')}`
        };
    }

    // 타입 검증
    if (type !== 'all' && !CONTENT_TYPES[type]) {
        return {
            error: `지원하지 않는 타입입니다: ${type}. 지원 타입: ${Object.keys(CONTENT_TYPES).filter(k => k !== 'all').join(', ')}, all`
        };
    }

    // 개수 검증
    const parsedNumOfRows = parseInt(numOfRows);
    if (isNaN(parsedNumOfRows) || parsedNumOfRows < 1) {
        return {
            error: 'numOfRows는 1 이상의 숫자여야 합니다'
        };
    }

    const validNumOfRows = Math.min(parsedNumOfRows, API_CONFIG.maxItemsPerRequest);

    return {
        region,
        type,
        detail,
        numOfRows: validNumOfRows
    };
}

// 유효한 API 키 찾기
function getValidApiKey() {
    const possibleKeys = [
        process.env.TOURISM_API_KEY,
        process.env.TOUR_API_KEY,
        process.env.JEONBUK_API_KEY,
        process.env.WEATHER_API_KEY,
        process.env.REGIONAL_API_KEY
    ];

    return possibleKeys.find(key => key && key.length > 0);
}

// 전체 타입 데이터 병렬 수집
async function fetchAllTypesData(apiKey, region, totalNumOfRows) {
    const types = ['festivals', 'accommodation', 'restaurants', 'culture', 'attractions'];
    const itemsPerType = Math.floor(totalNumOfRows / types.length);
    
    // 병렬 처리를 위한 지연 시간을 가진 Promise 배열
    const promises = types.map((type, index) => 
        new Promise(resolve => 
            setTimeout(async () => {
                try {
                    const data = await fetchTourismDataWithRetry(apiKey, region, type, itemsPerType);
                    resolve({ type, data });
                } catch (error) {
                    if (isDev) console.error(`❌ ${type} 수집 실패:`, error);
                    resolve({ type, data: [] });
                }
            }, index * 300) // 300ms 간격으로 요청
        )
    );

    const results = await Promise.all(promises);
    
    // 결과 정리
    const result = {};
    results.forEach(({ type, data }) => {
        result[type] = data;
    });

    return result;
}

// 재시도 로직이 포함된 관광 데이터 수집
async function fetchTourismDataWithRetry(apiKey, region, type, numOfRows, retryCount = 0) {
    try {
        return await fetchTourismData(apiKey, region, type, numOfRows);
    } catch (error) {
        if (retryCount < API_CONFIG.maxRetries) {
            if (isDev) console.log(`🔄 ${type} 재시도 ${retryCount + 1}/${API_CONFIG.maxRetries}`);
            await sleep(API_CONFIG.retryDelay * (retryCount + 1));
            return fetchTourismDataWithRetry(apiKey, region, type, numOfRows, retryCount + 1);
        }
        throw error;
    }
}

// 관광 데이터 수집 (Service2 버전)
async function fetchTourismData(apiKey, region, type, numOfRows) {
    const areaCode = AREA_CODES[region];
    const contentTypeId = CONTENT_TYPES[type];

    if (isDev) {
        console.log(`🔍 ${region} (${areaCode}) ${type} (${contentTypeId}) 수집...`);
    }

    const params = new URLSearchParams({
        serviceKey: apiKey,
        numOfRows: numOfRows.toString(),
        pageNo: '1',
        MobileOS: 'ETC',
        MobileApp: 'HealingK',
        _type: 'json',
        contentTypeId: contentTypeId.toString(),
        areaCode: areaCode.toString(),
        arrange: 'D',
        listYN: 'Y',
        mapinfoYN: 'Y',
        imageYN: 'Y'
    });

    // AbortController를 사용한 timeout 처리
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);

    try {
        const response = await fetch(`${API_CONFIG.baseUrl}?${params.toString()}`, {
            signal: controller.signal,
            headers: {
                'User-Agent': 'HealingK/1.0',
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            }
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        if (data.response?.header?.resultCode === '0000') {
            const items = data.response.body?.items?.item || [];
            const itemsArray = Array.isArray(items) ? items : [items];
            
            if (isDev) {
                console.log(`✅ ${type}: ${itemsArray.length}개 수집 완료`);
            }
            
            return processDataInChunks(itemsArray, type, contentTypeId);
        } else {
            const errorMsg = data.response?.header?.resultMsg || '알 수 없는 오류';
            if (isDev) {
                console.log(`⚠️ ${type}: 데이터 없음 (${errorMsg})`);
            }
            return [];
        }

    } catch (error) {
        clearTimeout(timeoutId);
        
        if (error.name === 'AbortError') {
            throw new Error(`${type} 요청 시간 초과 (${API_CONFIG.timeout}ms)`);
        }
        
        throw new Error(`${type} 수집 실패: ${error.message}`);
    }
}

// 데이터를 청크 단위로 처리 (메모리 효율성)
function processDataInChunks(itemsArray, type, contentTypeId) {
    const result = [];
    
    for (let i = 0; i < itemsArray.length; i += API_CONFIG.chunkSize) {
        const chunk = itemsArray.slice(i, i + API_CONFIG.chunkSize);
        const processedChunk = chunk.map(item => transformData(item, type, contentTypeId));
        result.push(...processedChunk);
    }
    
    return result;
}

// 데이터 변환 (개선된 버전)
function transformData(item, type, contentTypeId) {
    const baseData = {
        id: item.contentid || '',
        title: (item.title || '제목 없음').trim(),
        location: (item.addr1 || '주소 없음').trim(),
        detailLocation: (item.addr2 || '').trim(),
        region: getRegionFromAddr(item.addr1),
        tel: (item.tel || '').trim(),
        contentTypeId: parseInt(contentTypeId),
        contentType: type,
        coordinates: {
            x: parseFloat(item.mapx) || null,
            y: parseFloat(item.mapy) || null
        },
        images: {
            main: item.firstimage || null,
            thumbnail: item.firstimage2 || null
        },
        timestamps: {
            created: item.createdtime || '',
            modified: item.modifiedtime || ''
        },
        mlevel: item.mlevel || '1',
        zipcode: item.zipcode || '',
        bookmark: false,
        rating: Math.floor(Math.random() * 3) + 3, // 3-5 랜덤 평점
        originalData: {
            source: 'korean_tourism_organization_service2',
            contentType: type,
            isRealData: true,
            lastUpdated: new Date().toISOString()
        }
    };

    // 타입별 특화 데이터
    switch (parseInt(contentTypeId)) {
        case 15: // 축제
            return {
                ...baseData,
                category: 'festivals',
                eventStartDate: item.eventstartdate || '',
                eventEndDate: item.eventenddate || '',
                status: calculateEventStatus(item.eventstartdate, item.eventenddate),
                daysLeft: calculateDaysLeft(item.eventstartdate, item.eventenddate),
                eventDescription: item.overview || '',
                sponsor: item.sponsor1 || '',
                eventPlace: item.eventplace || ''
            };

        case 32: // 숙박
            return {
                ...baseData,
                category: 'accommodation',
                accommodationType: getAccommodationType(item.title),
                features: {
                    benikia: item.benikia === 'Y',
                    goodstay: item.goodstay === 'Y',
                    hanok: item.hanok === 'Y'
                },
                roomCount: parseInt(item.roomcount) || null,
                roomType: item.roomtype || '',
                checkInTime: item.checkintime || '',
                checkOutTime: item.checkouttime || ''
            };

        case 39: // 음식점
            return {
                ...baseData,
                category: 'restaurants',
                foodType: getFoodType(item.title),
                specialMenu: (item.treatmenu || '').trim(),
                facilities: {
                    smoking: item.smoking || '',
                    packing: item.packing || '',
                    parking: item.parking || ''
                },
                openTime: item.opentime || '',
                restDate: item.restdatefood || ''
            };

        case 14: // 문화시설
            return {
                ...baseData,
                category: 'culture',
                facilityType: 'culture',
                scale: item.scale || '',
                capacity: parseInt(item.accomcount) || null,
                useTime: item.usetimeculture || '',
                restDate: item.restdateculture || '',
                useFee: item.usefee || ''
            };

        case 12: // 관광지
            return {
                ...baseData,
                category: 'attractions',
                attractionType: 'tourism',
                heritage: {
                    level1: item.heritage1 || '',
                    level2: item.heritage2 || '',
                    level3: item.heritage3 || ''
                },
                useTime: item.usetime || '',
                restDate: item.restdate || '',
                ageLimit: item.agelimit || '',
                experienceAgeRange: item.expagerange || ''
            };

        default:
            return {
                ...baseData,
                category: 'etc'
            };
    }
}

// 개선된 유틸리티 함수들

function getAccommodationType(title) {
    const titleLower = title.toLowerCase();
    
    if (titleLower.includes('호텔') || titleLower.includes('hotel')) return 'hotel';
    if (titleLower.includes('펜션') || titleLower.includes('pension')) return 'pension';
    if (titleLower.includes('모텔') || titleLower.includes('motel')) return 'motel';
    if (titleLower.includes('리조트') || titleLower.includes('resort')) return 'resort';
    if (titleLower.includes('한옥') || titleLower.includes('hanok')) return 'hanok';
    if (titleLower.includes('게스트하우스') || titleLower.includes('guesthouse')) return 'guesthouse';
    if (titleLower.includes('캠핑') || titleLower.includes('camping')) return 'camping';
    
    return 'etc';
}

function getFoodType(title) {
    const titleLower = title.toLowerCase();
    
    if (titleLower.includes('한식') || titleLower.includes('korean')) return 'korean';
    if (titleLower.includes('중식') || titleLower.includes('chinese')) return 'chinese';
    if (titleLower.includes('일식') || titleLower.includes('japanese')) return 'japanese';
    if (titleLower.includes('양식') || titleLower.includes('western')) return 'western';
    if (titleLower.includes('카페') || titleLower.includes('cafe')) return 'cafe';
    if (titleLower.includes('치킨') || titleLower.includes('chicken')) return 'chicken';
    if (titleLower.includes('피자') || titleLower.includes('pizza')) return 'pizza';
    if (titleLower.includes('분식') || titleLower.includes('snack')) return 'snack';
    if (titleLower.includes('해산물') || titleLower.includes('seafood')) return 'seafood';
    if (titleLower.includes('고기') || titleLower.includes('meat')) return 'meat';
    
    return 'etc';
}

function parseKoreanDate(dateStr) {
    if (!dateStr || dateStr.length !== 8) return null;
    
    try {
        const year = dateStr.substring(0, 4);
        const month = dateStr.substring(4, 6);
        const day = dateStr.substring(6, 8);
        
        // 한국 시간대 고려
        return new Date(`${year}-${month}-${day}T00:00:00+09:00`);
    } catch (error) {
        return null;
    }
}

function calculateEventStatus(startDate, endDate) {
    if (!startDate || !endDate) return 'unknown';
    
    const start = parseKoreanDate(startDate);
    const end = parseKoreanDate(endDate);
    
    if (!start || !end) return 'unknown';
    
    const now = new Date();
    const nowKST = new Date(now.getTime() + (9 * 60 * 60 * 1000)); // UTC+9
    
    if (nowKST < start) return 'upcoming';
    if (nowKST > end) return 'ended';
    return 'ongoing';
}

function calculateDaysLeft(startDate, endDate) {
    if (!startDate || !endDate) return '날짜 미정';
    
    const start = parseKoreanDate(startDate);
    const end = parseKoreanDate(endDate);
    
    if (!start || !end) return '날짜 미정';
    
    const now = new Date();
    const nowKST = new Date(now.getTime() + (9 * 60 * 60 * 1000)); // UTC+9
    
    if (nowKST < start) {
        const diff = Math.ceil((start - nowKST) / (1000 * 60 * 60 * 24));
        return `${diff}일 후 시작`;
    }
    
    if (nowKST > end) {
        return '종료됨';
    }
    
    const diff = Math.ceil((end - nowKST) / (1000 * 60 * 60 * 24));
    return `${diff}일 남음`;
}

function getTotalCount(result) {
    let total = 0;
    for (const key in result) {
        if (Array.isArray(result[key])) {
            total += result[key].length;
        }
    }
    return total;
}

function getRegionFromAddr(addr) {
    if (!addr) return '기타';
    
    const regions = Object.keys(AREA_CODES);
    for (const region of regions) {
        if (addr.includes(region)) {
            return region;
        }
    }
    
    // 광역시/도 단위로도 확인
    const provinces = ['경기', '강원', '충북', '충남', '전북', '전남', '경북', '경남', '제주'];
    for (const province of provinces) {
        if (addr.includes(province)) {
            return province;
        }
    }
    
    return '기타';
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
