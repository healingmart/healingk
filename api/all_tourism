// api/all_tourism.js

const AREA_CODES = {
    '서울': 1, '부산': 6, '제주': 39, '강릉': 32,
    '전주': 37, '대구': 4, '광주': 5, '대전': 3,
    '인천': 2, '울산': 7, '경주': 35, '춘천': 32
};

const CONTENT_TYPES = {
    festivals: 15,
    accommodation: 32,
    restaurants: 39,
    culture: 14,
    attractions: 12,
    all: 'all'
};

export default async function handler(req, res) {
    // CORS 설정
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    try {
        const startTime = Date.now();
        const { 
            region = '서울', 
            type = 'festivals', 
            detail = 'basic',
            numOfRows = 50 
        } = req.query;

        console.log('🚀 통합 관광 API 시작');
        console.log(`📍 지역: ${region}`);
        console.log(`🏷️ 타입: ${type}`);

        // API 키 확인
        const possibleKeys = [
            process.env.TOURISM_API_KEY,
            process.env.TOUR_API_KEY,
            process.env.JEONBUK_API_KEY,
            process.env.WEATHER_API_KEY,
            process.env.REGIONAL_API_KEY
        ];

        const apiKey = possibleKeys.find(key => key);
        
        if (!apiKey) {
            return res.status(200).json({
                success: false,
                message: 'API 키가 설정되지 않았습니다',
                data: {}
            });
        }

        console.log('✅ API 키 확인됨');

        let result = {};

        if (type === 'all') {
            // 전체 타입 수집
            console.log('🌐 전체 타입 데이터 수집 시작...');
            const types = ['festivals', 'accommodation', 'restaurants', 'culture', 'attractions'];
            
            for (const t of types) {
                console.log(`🔄 ${t} 수집 중...`);
                result[t] = await fetchTourismData(apiKey, region, t, Math.floor(numOfRows / 5));
                await sleep(300);
            }
        } else {
            // 단일 타입 수집
            console.log(`🎯 ${type} 데이터 수집 시작...`);
            result[type] = await fetchTourismData(apiKey, region, type, numOfRows);
        }

        const responseTime = Date.now() - startTime;

        return res.status(200).json({
            success: true,
            data: result,
            meta: {
                region: region,
                type: type,
                detailLevel: detail,
                totalCount: getTotalCount(result),
                responseTime: `${responseTime}ms`,
                timestamp: new Date().toISOString()
            },
            message: `✅ ${region} ${type} 통합 관광 정보 ${getTotalCount(result)}개 수집 완료`
        });

    } catch (error) {
        console.error('❌ 통합 관광 API 오류:', error);
        return res.status(500).json({
            success: false,
            error: error.message,
            message: '통합 관광 정보 수집 중 오류가 발생했습니다',
            timestamp: new Date().toISOString()
        });
    }
}

// 관광 데이터 수집
async function fetchTourismData(apiKey, region, type, numOfRows) {
    try {
        const areaCode = AREA_CODES[region] || 1;
        const contentTypeId = CONTENT_TYPES[type] || 15;

        console.log(`🔍 ${region} (${areaCode}) ${type} (${contentTypeId}) 수집...`);

        const url = 'https://apis.data.go.kr/B551011/KorService2/areaBasedList2';
        const params = new URLSearchParams({
            serviceKey: apiKey,
            numOfRows: Math.min(numOfRows, 100),
            pageNo: 1,
            MobileOS: 'ETC',
            MobileApp: 'HealingK',
            _type: 'json',
            contentTypeId: contentTypeId,
            areaCode: areaCode,
            arrange: 'D'
        });

        const response = await fetch(`${url}?${params.toString()}`, {
            timeout: 10000
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }

        const data = await response.json();
        
        if (data.response?.header?.resultCode === '0000') {
            const items = data.response.body?.items?.item || [];
            const itemsArray = Array.isArray(items) ? items : [items];
            
            console.log(`✅ ${type}: ${itemsArray.length}개 수집 완료`);
            
            return itemsArray.map(item => transformData(item, type, contentTypeId));
        } else {
            console.log(`⚠️ ${type}: 데이터 없음 (${data.response?.header?.resultMsg})`);
            return [];
        }

    } catch (error) {
        console.error(`❌ ${type} 수집 오류:`, error);
        return [];
    }
}

// 데이터 변환
function transformData(item, type, contentTypeId) {
    const baseData = {
        id: item.contentid,
        title: item.title || '제목 없음',
        location: item.addr1 || '주소 없음',
        region: getRegionFromAddr(item.addr1),
        tel: item.tel || '',
        contentTypeId: contentTypeId,
        contentType: type,
        mapx: item.mapx,
        mapy: item.mapy,
        image: item.firstimage || null,
        thumbnail: item.firstimage2 || null,
        createdtime: item.createdtime,
        modifiedtime: item.modifiedtime,
        mlevel: item.mlevel || '1',
        zipcode: item.zipcode || '',
        originalData: {
            source: 'korean_tourism_organization',
            contentType: type,
            isRealData: true
        }
    };

    // 타입별 특화 데이터
    switch (contentTypeId) {
        case '15': // 축제
            return {
                ...baseData,
                category: 'festivals',
                eventStartDate: item.eventstartdate || '',
                eventEndDate: item.eventenddate || '',
                status: calculateEventStatus(item.eventstartdate, item.eventenddate),
                daysLeft: calculateDaysLeft(item.eventstartdate, item.eventenddate)
            };

        case '32': // 숙박
            return {
                ...baseData,
                category: 'accommodation',
                accommodationType: getAccommodationType(item.title),
                benikia: item.benikia || 'N',
                goodstay: item.goodstay || 'N',
                hanok: item.hanok || 'N'
            };

        case '39': // 음식점
            return {
                ...baseData,
                category: 'restaurants',
                foodType: getFoodType(item.title),
                treatmenu: item.treatmenu || '',
                smoking: item.smoking || '',
                packing: item.packing || ''
            };

        case '14': // 문화시설
            return {
                ...baseData,
                category: 'culture',
                facilityType: 'culture',
                scale: item.scale || '',
                accomcount: item.accomcount || ''
            };

        case '12': // 관광지
            return {
                ...baseData,
                category: 'attractions',
                attractionType: 'tourism',
                heritage1: item.heritage1 || '',
                heritage2: item.heritage2 || '',
                heritage3: item.heritage3 || ''
            };

        default:
            return baseData;
    }
}

// 유틸리티 함수들
function getAccommodationType(title) {
    if (title.includes('호텔')) return 'hotel';
    if (title.includes('펜션')) return 'pension';
    if (title.includes('모텔')) return 'motel';
    if (title.includes('리조트')) return 'resort';
    if (title.includes('한옥')) return 'hanok';
    return 'etc';
}

function getFoodType(title) {
    if (title.includes('한식')) return 'korean';
    if (title.includes('중식')) return 'chinese';
    if (title.includes('일식')) return 'japanese';
    if (title.includes('양식')) return 'western';
    if (title.includes('카페')) return 'cafe';
    return 'etc';
}

function calculateEventStatus(startDate, endDate) {
    if (!startDate || !endDate) return 'unknown';
    
    try {
        const now = new Date();
        const start = new Date(startDate.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3'));
        const end = new Date(endDate.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3'));
        
        if (now < start) return 'upcoming';
        if (now > end) return 'ended';
        return 'ongoing';
    } catch (error) {
        return 'unknown';
    }
}

function calculateDaysLeft(startDate, endDate) {
    if (!startDate || !endDate) return '날짜 미정';
    
    try {
        const now = new Date();
        const start = new Date(startDate.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3'));
        const end = new Date(endDate.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3'));
        
        if (now < start) {
            const diff = Math.ceil((start - now) / (1000 * 60 * 60 * 24));
            return `${diff}일 후 시작`;
        }
        if (now > end) {
            return '종료됨';
        }
        const diff = Math.ceil((end - now) / (1000 * 60 * 60 * 24));
        return `${diff}일 남음`;
    } catch (error) {
        return '날짜 미정';
    }
}

function getTotalCount(result) {
    let total = 0;
    for (const key in result) {
        if (Array.isArray(result[key])) {
            total += result[key].length;
        }
    }
    return total;
}

function getRegionFromAddr(addr) {
    if (!addr) return '기타';
    
    const regions = Object.keys(AREA_CODES);
    for (const region of regions) {
        if (addr.includes(region)) {
            return region;
        }
    }
    return '기타';
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
