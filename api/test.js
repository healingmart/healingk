// api/test.js (ÏôÑÏ†ÑÌïú ÌÖåÏä§Ìä∏ ÌÜµÌï© Î≤ÑÏ†Ñ)

export default async function handler(req, res) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    try {
        const { test = '1' } = req.query;
        
        const apiKey = process.env.TOURISM_API_KEY || process.env.TOUR_API_KEY || process.env.JEONBUK_API_KEY;
        if (!apiKey) {
            return res.status(500).json({ success: false, message: '‚ùå API ÌÇ§ ÏóÜÏùå' });
        }

        let result = {};

        if (test === '3') {
            // üè® ÏàôÎ∞ï (Ïù¥ÎØ∏ ÏÑ±Í≥µÌïú Í≤É)
            result = await analyzeData(apiKey, '142785', '32', 'ÏàôÎ∞ï');
            
        } else if (test === '13') {
            // üîç Ïã§Ï†ú ÏùåÏãùÏ†ê Í≤ÄÏÉâ
            result = await searchRealData(apiKey, '39', 'ÏùåÏãùÏ†ê');
            
        } else if (test === '15') {
            // üçΩÔ∏è ÏùåÏãùÏ†ê ÏÉÅÏÑ∏ Î∂ÑÏÑù
            result = await analyzeData(apiKey, '2871024', '39', 'ÏùåÏãùÏ†ê');
            
        } else if (test === '17') {
            // üèõÔ∏è Í¥ÄÍ¥ëÏßÄ Î∂ÑÏÑù
            result = await searchAndAnalyze(apiKey, '12', 'Í¥ÄÍ¥ëÏßÄ');
            
        } else if (test === '18') {
            // üé≠ Ï∂ïÏ†ú Î∂ÑÏÑù
            result = await searchAndAnalyze(apiKey, '15', 'Ï∂ïÏ†ú');
            
        } else if (test === '19') {
            // üìä Í∏∞Î≥∏ 4ÌÉÄÏûÖ ÌÜµÌï© Î∂ÑÏÑù
            const analyses = await Promise.all([
                analyzeData(apiKey, '142785', '32', 'ÏàôÎ∞ï'),      // ÏÑ±Í≥µ ÌôïÏù∏
                analyzeData(apiKey, '2871024', '39', 'ÏùåÏãùÏ†ê'),   // ÏÑ±Í≥µ ÌôïÏù∏
                analyzeData(apiKey, '2733967', '12', 'Í¥ÄÍ¥ëÏßÄ'),   // ÏÑ±Í≥µ ÌôïÏù∏
                analyzeData(apiKey, '3113671', '15', 'Ï∂ïÏ†ú')      // ÏÑ±Í≥µ ÌôïÏù∏
            ]);
            
            result = {
                success: true,
                type: 'Í∏∞Î≥∏ 4ÌÉÄÏûÖ ÌÜµÌï© Î∂ÑÏÑù',
                analyses: analyses,
                summary: {
                    successful: analyses.filter(a => a.success).length,
                    avgCompleteness: analyses
                        .filter(a => a.success)
                        .reduce((sum, a) => sum + a.analysis.completeness, 0) / analyses.length
                }
            };
            
        } else if (test === '20') {
            // üõçÔ∏è ÏáºÌïë Î∂ÑÏÑù
            result = await searchAndAnalyze(apiKey, '38', 'ÏáºÌïë');
            
        } else if (test === '21') {
            // üé® Î¨∏ÌôîÏãúÏÑ§ Î∂ÑÏÑù
            result = await searchAndAnalyze(apiKey, '14', 'Î¨∏ÌôîÏãúÏÑ§');
            
        } else if (test === '22') {
            // üö¥ Î†àÌè¨Ï∏† Î∂ÑÏÑù
            result = await searchAndAnalyze(apiKey, '28', 'Î†àÌè¨Ï∏†');
            
        } else if (test === '23') {
            // üó∫Ô∏è Ïó¨ÌñâÏΩîÏä§ Î∂ÑÏÑù
            result = await searchAndAnalyze(apiKey, '25', 'Ïó¨ÌñâÏΩîÏä§');
            
        } else if (test === '24') {
            // üåü ÏµúÏ¢Ö Ï†ÑÏ≤¥ ÌÉÄÏûÖ Ï¢ÖÌï© Î∂ÑÏÑù
            const allAnalyses = await Promise.all([
                analyzeData(apiKey, '142785', '32', 'ÏàôÎ∞ï'),
                analyzeData(apiKey, '2871024', '39', 'ÏùåÏãùÏ†ê'),
                analyzeData(apiKey, '2733967', '12', 'Í¥ÄÍ¥ëÏßÄ'),
                analyzeData(apiKey, '3113671', '15', 'Ï∂ïÏ†ú'),
                searchAndAnalyze(apiKey, '38', 'ÏáºÌïë'),
                searchAndAnalyze(apiKey, '14', 'Î¨∏ÌôîÏãúÏÑ§'),
                searchAndAnalyze(apiKey, '28', 'Î†àÌè¨Ï∏†'),
                searchAndAnalyze(apiKey, '25', 'Ïó¨ÌñâÏΩîÏä§')
            ]);
            
            result = {
                success: true,
                type: 'ÏµúÏ¢Ö Ï†ÑÏ≤¥ ÌÉÄÏûÖ Ï¢ÖÌï© Î∂ÑÏÑù',
                totalTypes: 8,
                analyses: allAnalyses,
                summary: {
                    successful: allAnalyses.filter(a => a.success).length,
                    failed: allAnalyses.filter(a => !a.success).length,
                    avgCompleteness: allAnalyses
                        .filter(a => a.success)
                        .reduce((sum, a) => sum + (a.analysis?.completeness || a.detailAnalysis?.analysis?.completeness || 0), 0) / allAnalyses.filter(a => a.success).length,
                    typeResults: allAnalyses.map(a => ({
                        type: a.type,
                        success: a.success,
                        completeness: a.analysis?.completeness || a.detailAnalysis?.analysis?.completeness || 0
                    }))
                }
            };
            
        } else if (test === '25') {
            // üìã ÌÖåÏä§Ìä∏ Î™©Î°ù Î∞è ÌòÑÌô©
            result = {
                success: true,
                type: 'ÌÖåÏä§Ìä∏ ÌòÑÌô©',
                availableTests: {
                    'test=3': 'üè® ÏàôÎ∞ï Î∂ÑÏÑù (ÏÑ±Í≥µ ÌôïÏù∏Îê®)',
                    'test=13': 'üîç Ïã§Ï†ú ÏùåÏãùÏ†ê Í≤ÄÏÉâ',
                    'test=15': 'üçΩÔ∏è ÏùåÏãùÏ†ê ÏÉÅÏÑ∏ Î∂ÑÏÑù (ÏÑ±Í≥µ ÌôïÏù∏Îê®)',
                    'test=17': 'üèõÔ∏è Í¥ÄÍ¥ëÏßÄ Î∂ÑÏÑù (ÏÑ±Í≥µ ÌôïÏù∏Îê®)',
                    'test=18': 'üé≠ Ï∂ïÏ†ú Î∂ÑÏÑù (ÏÑ±Í≥µ ÌôïÏù∏Îê®)',
                    'test=19': 'üìä Í∏∞Î≥∏ 4ÌÉÄÏûÖ ÌÜµÌï© Î∂ÑÏÑù',
                    'test=20': 'üõçÔ∏è ÏáºÌïë Î∂ÑÏÑù',
                    'test=21': 'üé® Î¨∏ÌôîÏãúÏÑ§ Î∂ÑÏÑù',
                    'test=22': 'üö¥ Î†àÌè¨Ï∏† Î∂ÑÏÑù',
                    'test=23': 'üó∫Ô∏è Ïó¨ÌñâÏΩîÏä§ Î∂ÑÏÑù',
                    'test=24': 'üåü ÏµúÏ¢Ö Ï†ÑÏ≤¥ ÌÉÄÏûÖ Ï¢ÖÌï© Î∂ÑÏÑù',
                    'test=25': 'üìã Ïù¥ ÌÖåÏä§Ìä∏ ÌòÑÌô©Ìëú'
                },
                completedTests: ['3', '15', '17', '18', '19'],
                pendingTests: ['20', '21', '22', '23', '24'],
                currentProgress: 'ÏïΩ 60% ÏôÑÎ£å'
            };
        }

        return res.status(200).json({
            success: true,
            test: test,
            result: result,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        return res.status(500).json({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
}

// Í≤ÄÏÉâ ÌõÑ Î∂ÑÏÑù Ìï®Ïàò
async function searchAndAnalyze(apiKey, contentTypeId, typeName) {
    try {
        const searchUrl = `https://apis.data.go.kr/B551011/KorService2/areaBasedList2?serviceKey=${apiKey}&MobileOS=ETC&MobileApp=HealingK&_type=json&contentTypeId=${contentTypeId}&areaCode=1&numOfRows=3`;
        
        const searchResponse = await fetch(searchUrl);
        const searchData = await searchResponse.json();
        
        const searchCode = searchData.resultCode || searchData.response?.header?.resultCode;
        
        if (searchCode === '0' || searchCode === '0000') {
            const items = searchData.response?.body?.items?.item || [];
            const itemList = Array.isArray(items) ? items : [items];
            
            if (itemList.length > 0) {
                const firstItem = itemList[0];
                const detailResult = await analyzeData(apiKey, firstItem.contentid, contentTypeId, typeName);
                
                return {
                    success: true,
                    type: `Ïã§Ï†ú ${typeName} Î∂ÑÏÑù`,
                    searchList: itemList.map(item => ({
                        contentId: item.contentid,
                        title: item.title,
                        addr1: item.addr1
                    })),
                    detailAnalysis: detailResult
                };
            }
        }
        
        return {
            success: false,
            type: typeName,
            message: 'Í≤ÄÏÉâ Í≤∞Í≥º ÏóÜÏùå'
        };
        
    } catch (error) {
        return {
            success: false,
            type: typeName,
            error: error.message
        };
    }
}

// Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÉâ Ìï®Ïàò
async function searchRealData(apiKey, contentTypeId, typeName) {
    try {
        const searchUrl = `https://apis.data.go.kr/B551011/KorService2/areaBasedList2?serviceKey=${apiKey}&MobileOS=ETC&MobileApp=HealingK&_type=json&contentTypeId=${contentTypeId}&areaCode=1&numOfRows=5`;
        
        const searchResponse = await fetch(searchUrl);
        const searchData = await searchResponse.json();
        
        const searchCode = searchData.resultCode || searchData.response?.header?.resultCode;
        
        if (searchCode === '0' || searchCode === '0000') {
            const items = searchData.response?.body?.items?.item || [];
            const itemList = Array.isArray(items) ? items : [items];
            
            return {
                success: true,
                type: `Ïã§Ï†ú ${typeName} Í≤ÄÏÉâ`,
                totalFound: itemList.length,
                itemList: itemList.map(item => ({
                    contentId: item.contentid,
                    title: item.title,
                    addr1: item.addr1,
                    tel: item.tel || 'N/A'
                })),
                searchResponse: searchData.response?.header
            };
        }
        
        return {
            success: false,
            type: typeName,
            message: 'Í≤ÄÏÉâ Ïã§Ìå®'
        };
        
    } catch (error) {
        return {
            success: false,
            type: typeName,
            error: error.message
        };
    }
}

// ÏÉÅÏÑ∏ Î∂ÑÏÑù Ìï®Ïàò
async function analyzeData(apiKey, contentId, contentTypeId, typeName) {
    try {
        const commonUrl = `https://apis.data.go.kr/B551011/KorService2/detailCommon2?serviceKey=${apiKey}&MobileOS=ETC&MobileApp=HealingK&_type=json&contentId=${contentId}`;
        const introUrl = `https://apis.data.go.kr/B551011/KorService2/detailIntro2?serviceKey=${apiKey}&MobileOS=ETC&MobileApp=HealingK&_type=json&contentId=${contentId}&contentTypeId=${contentTypeId}`;
        
        const [commonRes, introRes] = await Promise.all([fetch(commonUrl), fetch(introUrl)]);
        const [commonData, introData] = await Promise.all([commonRes.json(), introRes.json()]);
        
        let common = null;
        let intro = null;
        
        // DetailCommon Ï≤òÎ¶¨
        const commonCode = commonData.resultCode || commonData.response?.header?.resultCode;
        if (commonCode === '0' || commonCode === '0000') {
            const commonItem = commonData.response?.body?.items?.item || commonData.items?.item || commonData.item;
            if (commonItem) {
                const itemData = Array.isArray(commonItem) ? commonItem[0] : commonItem;
                common = {
                    title: itemData.title || null,
                    overview: itemData.overview?.substring(0, 150) + '...' || null,
                    tel: itemData.tel || null,
                    homepage: itemData.homepage?.replace(/<[^>]*>/g, '') || null,
                    addr1: itemData.addr1 || null,
                    usetime: itemData.usetime || null,
                    parking: itemData.parking || null,
                    usefee: itemData.usefee || null
                };
            }
        }
        
        // DetailIntro Ï≤òÎ¶¨
        const introCode = introData.resultCode || introData.response?.header?.resultCode;
        if (introCode === '0' || introCode === '0000') {
            const introItem = introData.response?.body?.items?.item || introData.items?.item || introData.item;
            if (introItem) {
                const itemData = Array.isArray(introItem) ? introItem[0] : introItem;
                
                if (contentTypeId === '32') { // ÏàôÎ∞ï
                    intro = {
                        type: 'ÏàôÎ∞ï',
                        roomCount: itemData.roomcount || null,
                        checkIn: itemData.checkintime || null,
                        checkOut: itemData.checkouttime || null,
                        roomType: itemData.roomtype || null
                    };
                } else if (contentTypeId === '39') { // ÏùåÏãùÏ†ê
                    intro = {
                        type: 'ÏùåÏãùÏ†ê',
                        treatMenu: itemData.treatmenu || null,
                        openTime: itemData.opentimefood || null,
                        restDate: itemData.restdatefood || null,
                        firstMenu: itemData.firstmenu || null,
                        packing: itemData.packing || null
                    };
                } else if (contentTypeId === '12') { // Í¥ÄÍ¥ëÏßÄ
                    intro = {
                        type: 'Í¥ÄÍ¥ëÏßÄ',
                        expguide: itemData.expguide || null,
                        heritage1: itemData.heritage1 || null,
                        useseason: itemData.useseason || null,
                        accomcount: itemData.accomcount || null
                    };
                } else if (contentTypeId === '15') { // Ï∂ïÏ†ú
                    intro = {
                        type: 'Ï∂ïÏ†ú',
                        eventStart: itemData.eventstartdate || null,
                        eventEnd: itemData.eventenddate || null,
                        eventPlace: itemData.eventplace || null,
                        program: itemData.program || null
                    };
                } else if (contentTypeId === '38') { // ÏáºÌïë
                    intro = {
                        type: 'ÏáºÌïë',
                        saleItem: itemData.saleitem || null,
                        openTime: itemData.opentime || null,
                        restDate: itemData.restdateshopping || null,
                        fairday: itemData.fairday || null
                    };
                } else if (contentTypeId === '14') { // Î¨∏ÌôîÏãúÏÑ§
                    intro = {
                        type: 'Î¨∏ÌôîÏãúÏÑ§',
                        scale: itemData.scale || null,
                        usefee: itemData.usefee || null,
                        usetime: itemData.usetime || null,
                        restdate: itemData.restdate || null
                    };
                } else if (contentTypeId === '28') { // Î†àÌè¨Ï∏†
                    intro = {
                        type: 'Î†àÌè¨Ï∏†',
                        usefeeleports: itemData.usefeeleports || null,
                        usetimeleports: itemData.usetimeleports || null,
                        restdateleports: itemData.restdateleports || null,
                        reservation: itemData.reservation || null
                    };
                } else if (contentTypeId === '25') { // Ïó¨ÌñâÏΩîÏä§
                    intro = {
                        type: 'Ïó¨ÌñâÏΩîÏä§',
                        distance: itemData.distance || null,
                        schedule: itemData.schedule || null,
                        taketime: itemData.taketime || null,
                        theme: itemData.theme || null
                    };
                }
            }
        }
        
        // ÏôÑÏÑ±ÎèÑ Í≥ÑÏÇ∞
        let completeness = 20;
        if (common?.overview) completeness += 30;
        if (common?.tel) completeness += 10;
        if (common?.homepage) completeness += 10;
        if (common?.usetime) completeness += 10;
        if (intro && Object.values(intro).some(v => v !== null && v !== '0')) completeness += 20;
        
        return {
            success: true,
            type: typeName,
            contentId: contentId,
            contentTypeId: contentTypeId,
            common: common,
            intro: intro,
            analysis: {
                hasDetailInfo: intro !== null,
                hasContact: !!common?.tel,
                hasOperatingTime: !!(common?.usetime || intro?.openTime || intro?.usetimeleports),
                completeness: Math.min(completeness, 100)
            }
        };
        
    } catch (error) {
        return {
            success: false,
            type: typeName,
            contentId: contentId,
            error: error.message
        };
    }
}
